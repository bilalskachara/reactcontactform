{"version":3,"sources":["ContactUs.js","serviceWorker.js","index.js"],"names":["ContactUs","props","state","fields","errors","this","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","setState","e","preventDefault","handleValidation","console","log","sendEmail","emailjs","from_name","to_name","message","reply_to","field","target","value","className","name","onSubmit","contactSubmit","bind","type","size","placeholder","onChange","handleChange","cols","rows","id","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ebdf3daa.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as emailjs from 'emailjs-com';\r\n\r\nclass ContactUs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: {},\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    handleValidation() {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        //Name\r\n        if (!fields[\"name\"]) {\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Cannot be empty\";\r\n        }\r\n        if (typeof fields[\"name\"] !== \"undefined\") {\r\n            if (!fields[\"name\"].match(/^[a-zA-Z ]+$/)) {\r\n                formIsValid = false;\r\n                errors[\"name\"] = \"Only letters\";\r\n            }\r\n        }\r\n\r\n        //Email\r\n        if (!fields[\"email\"]) {\r\n            formIsValid = false;\r\n            errors[\"email\"] = \"Cannot be empty\";\r\n        }\r\n        if (typeof fields[\"email\"] !== \"undefined\") {\r\n            let lastAtPos = fields[\"email\"].lastIndexOf('@');\r\n            let lastDotPos = fields[\"email\"].lastIndexOf('.');\r\n\r\n            if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') === -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\r\n                formIsValid = false;\r\n                errors[\"email\"] = \"Email is not valid\";\r\n            }\r\n        }\r\n\r\n        //phone\r\n        if(!fields[\"phone\"]){\r\n            formIsValid = false;\r\n            errors[\"phone\"] = \"Cannot be empty\";\r\n        }\r\n        if(typeof  fields[\"phone\"] !== \"undefined\"){\r\n            if(!fields[\"phone\"].match(/^[0-9]+$/)){\r\n                formIsValid = false;\r\n                errors[\"phone\"] = \"Only Numbers\";\r\n            }\r\n        }\r\n\r\n        this.setState({errors: errors});\r\n        return formIsValid;\r\n    }\r\n\r\n    contactSubmit(e) {\r\n        e.preventDefault();\r\n        if (this.handleValidation()) {\r\n            console.log(\"Form submitted\");\r\n            this.sendEmail(e)\r\n        } else {\r\n            console.log(\"Form has errors.\")\r\n        }\r\n    }\r\n\r\n    sendEmail(e) {\r\n        let fields = this.state.fields;\r\n\r\n        emailjs.send(\"service_0atgei8\",\"template_a3ca3wv\",{\r\n            from_name: fields['email'] + \" from \" + fields['address'],\r\n            to_name: fields['name'],\r\n            message: fields['message'],\r\n            reply_to: fields['email']\r\n        },'user_C8lKxSkvT8TqrKLSUgQZ6');\r\n    }\r\n\r\n    handleChange(field, e) {\r\n        let fields = this.state.fields;\r\n        fields[field] = e.target.value;\r\n        this.setState({fields});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <form name=\"contactform\" className=\"contactform\" onSubmit={this.contactSubmit.bind(this)}>\r\n                    <div className='row mt-3'>\r\n                        <div className=\"col-md-6\">\r\n                            <div className='form-group'>\r\n                                <input className='form-control' type=\"text\" size=\"30\" placeholder=\"Name\"\r\n                                       onChange={this.handleChange.bind(this, \"name\")}\r\n                                       value={this.state.fields[\"name\"]}/>\r\n                                <span className=\"text-danger\">{this.state.errors[\"name\"]}</span>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input className='form-control' type=\"text\" size=\"30\" placeholder=\"Email\"\r\n                                       onChange={this.handleChange.bind(this, \"email\")}\r\n                                       value={this.state.fields[\"email\"]}/>\r\n                                <span className=\"text-danger\">{this.state.errors[\"email\"]}</span>\r\n                            </div>\r\n                            <div className='form-group'>\r\n                                <input className='form-control' type=\"text\" size=\"30\" placeholder=\"Phone\"\r\n                                       onChange={this.handleChange.bind(this, \"phone\")}\r\n                                       value={this.state.fields[\"phone\"]}/>\r\n                                <span className='text-danger'>{this.state.errors[\"phone\"]}</span>\r\n                            </div>\r\n                            <div className='form-group mb-0'>\r\n                                <input className='form-control' type=\"text\" size=\"30\"\r\n                                       placeholder=\"Address\" onChange={this.handleChange.bind(this, \"address\")}\r\n                                       value={this.state.fields[\"address\"]}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className='form-group h-100'>\r\n                                <textarea cols=\"28\" rows=\"6\" className=\"h-100 form-control comments\"\r\n                                          placeholder=\"Message\"\r\n                                          onChange={this.handleChange.bind(this, \"message\")}>{this.state.fields[\"message\"]}</textarea>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"my-3\">\r\n                        <button className=\"btn btn-primary btn-lg pro\" id=\"submit\" value=\"Submit\">Send Message</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContactUs","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*import FunctionComponent from './FunctionComponent';\nimport StateClass from './StateClass';\nimport FunctionCall from './FunctionCall';\nimport Fragment from './Fragment';\nimport MapFunction from './MapFunction';\nimport StyleSheet from './StyleSheet';\nimport InlineStyle from './InlineStyle'\nimport Form from './Form'\nimport CssModule from'./CssModule.js';\nimport Routing from './Routing/Routing'\nimport LifeCycleA from './LifeCycle/LifeCycleA'\nimport Product from './LifeCycle/Product'\nimport GetRequest from './LifeCycle/GetRequest'*/\nimport ContactUs from './ContactUs'\nimport * as serviceWorker from './serviceWorker';\n\n/*ReactDOM.render(<FunctionComponent info=\"Function Compo\"/>,\n  document.getElementById('root')\n);\nReactDOM.render(<StateClass roll=\"20\"/>,\n    document.getElementById('root1')\n);\nReactDOM.render(<FunctionCall />,\n    document.getElementById('root2')\n);\nReactDOM.render(<Fragment />,\n    document.getElementById('root3')\n);\nReactDOM.render(<MapFunction num={[12,45,10,11,21]}/>,\n    document.getElementById('root4')\n);\n\nReactDOM.render(<StyleSheet isvalue={true} />,\n    document.getElementById('root5')\n);\n\nReactDOM.render(<InlineStyle />,\n    document.getElementById('root6')\n);\n\nReactDOM.render(<CssModule />,\n    document.getElementById('root7')\n);\n\nReactDOM.render(<Form />,\n    document.getElementById('root8')\n);\n\nReactDOM.render(<Routing />,\n    document.getElementById('root9')\n);\n\nReactDOM.render(<LifeCycleA />,\n    document.getElementById('root10')\n);\n\nReactDOM.render(<Product />,\n    document.getElementById('root11')\n);*/\n\n/*ReactDOM.render(<GetRequest />,\n    document.getElementById('root12')\n);*/\n\nReactDOM.render(<ContactUs />,\n    document.getElementById('root13')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}